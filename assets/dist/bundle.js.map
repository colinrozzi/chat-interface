{
  "version": 3,
  "sources": ["../src/index.js"],
  "sourcesContent": ["// DOM Elements\nconst newChatBtn = document.getElementById('new-chat-btn');\nconst conversationList = document.getElementById('conversation-list');\nconst messagesContainer = document.getElementById('messages-container');\nconst messageInput = document.getElementById('message-input');\nconst sendButton = document.getElementById('send-button');\nconst currentConversationTitle = document.getElementById('current-conversation-title');\nconst settingsPanel = document.getElementById('settings-panel');\nconst closeSettingsBtn = document.getElementById('close-settings-btn');\nconst settingsForm = document.getElementById('settings-form');\nconst temperatureInput = document.getElementById('temperature-input');\nconst temperatureValue = document.getElementById('temperature-value');\n\n// State\nlet socket = null;\nlet activeConversationId = null;\nlet conversations = [];\nlet isWaitingForResponse = false;\n\n// Initialize the application\nfunction init() {\n    connectWebSocket();\n    setupEventListeners();\n    initSettingsPanel();\n    initThemeToggle();\n    loadTheme();\n    setupMobileResponsiveness();\n}\n\n// Connect to WebSocket server\nfunction connectWebSocket() {\n    // Get the current hostname and port\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    socket = new WebSocket(wsUrl);\n    \n    socket.onopen = () => {\n        console.log('WebSocket connection established');\n        // Request the list of existing conversations\n        sendAction('list_conversations');\n    };\n    \n    socket.onmessage = (event) => {\n        const message = JSON.parse(event.data);\n        handleServerMessage(message);\n    };\n    \n    socket.onclose = () => {\n        console.log('WebSocket connection closed');\n        // Try to reconnect after a delay\n        setTimeout(connectWebSocket, 3000);\n    };\n    \n    socket.onerror = (error) => {\n        console.error('WebSocket error:', error);\n    };\n}\n\n// Set up event listeners\nfunction setupEventListeners() {\n    newChatBtn.addEventListener('click', createNewConversation);\n    \n    sendButton.addEventListener('click', sendMessage);\n    \n    messageInput.addEventListener('keydown', (e) => {\n        if (e.key === 'Enter' && !e.shiftKey) {\n            e.preventDefault();\n            sendMessage();\n        }\n    });\n    \n    // Settings panel listeners\n    closeSettingsBtn.addEventListener('click', () => {\n        settingsPanel.classList.add('collapsed');\n    });\n    \n    settingsForm.addEventListener('submit', saveSettings);\n    \n    temperatureInput.addEventListener('input', updateTemperatureValue);\n    \n    // Add settings button to chat header\n    setupSettingsButton();\n}\n\n// Create a new conversation\nfunction createNewConversation() {\n    // Clear the messages container first\n    clearMessages();\n    \n    // Send the new conversation request\n    sendAction('new_conversation');\n}\n\n// Send a message\nfunction sendMessage() {\n    const message = messageInput.value.trim();\n    \n    if (!message || !activeConversationId || isWaitingForResponse) {\n        return;\n    }\n    \n    // Add the message to the UI immediately\n    addUserMessage(message);\n    \n    // Show loading indicator\n    showLoadingIndicator();\n    \n    // Set waiting state\n    isWaitingForResponse = true;\n    sendButton.disabled = true;\n\n    let messageObj = {\n        role: 'user',\n        content: [\n            {\n                type: 'text',\n                text: message\n            }\n        ]\n    }\n    \n    // Send the message to the server\n    sendAction('send_message', {\n        conversation_id: activeConversationId,\n        message: messageObj\n    });\n    \n    // Clear the input\n    messageInput.value = '';\n}\n\n// Show loading indicator\nfunction showLoadingIndicator() {\n    const loadingElement = document.createElement('div');\n    loadingElement.className = 'loading';\n    loadingElement.id = 'loading-indicator';\n    \n    const dotsContainer = document.createElement('div');\n    dotsContainer.className = 'loading-dots';\n    \n    for (let i = 0; i < 3; i++) {\n        const dot = document.createElement('div');\n        dot.className = 'loading-dot';\n        dotsContainer.appendChild(dot);\n    }\n    \n    loadingElement.appendChild(dotsContainer);\n    messagesContainer.appendChild(loadingElement);\n    \n    // Scroll to the bottom\n    messagesContainer.scrollTop = messagesContainer.scrollHeight;\n}\n\n// Hide loading indicator\nfunction hideLoadingIndicator() {\n    const loadingElement = document.getElementById('loading-indicator');\n    if (loadingElement) {\n        loadingElement.remove();\n    }\n    \n    // Reset waiting state\n    isWaitingForResponse = false;\n    sendButton.disabled = false;\n}\n\n// Send an action to the server\nfunction sendAction(action, additionalData = {}) {\n    if (!socket || socket.readyState !== WebSocket.OPEN) {\n        showError('Connection to server lost. Trying to reconnect...');\n        return;\n    }\n    \n    const data = {\n        action: action,\n        ...additionalData\n    };\n    \n    socket.send(JSON.stringify(data));\n}\n\n// Handle server messages\nfunction handleServerMessage(message) {\n    console.log('Received message:', message);\n    \n    // If we get any message, hide the loading indicator\n    hideLoadingIndicator();\n    \n    // Check the type field which is now part of the tagged enum\n    switch (message.type) {\n        case 'welcome':\n            // Server welcome message\n            break;\n            \n        case 'conversation_created':\n            handleConversationCreated(message);\n            break;\n            \n        case 'conversation_list':\n            handleConversationList(message.conversations);\n            break;\n            \n        case 'message':\n            handleIncomingMessage(message);\n            break;\n\n        case 'messages':\n            handleIncomingMessages(message);\n            break;\n            \n        case 'history':\n            handleConversationHistory(message);\n            break;\n            \n        case 'error':\n            showError(message.message); // Note: using message.message as error content\n            break;\n        \n        case 'settings':\n            updateSettingsForm(message.settings);\n            break;\n        \n        case 'settings_updated':\n            showMessage('Settings updated successfully');\n            break;\n            \n        default:\n            console.warn('Unknown message type:', message.type);\n    }\n}\n\n// Handle conversation created\nfunction handleConversationCreated(message) {\n    activeConversationId = message.conversation_id;\n    currentConversationTitle.textContent = 'New Conversation';\n    \n    // Add to conversation list if not already there\n    if (!conversations.some(conv => conv.id === message.conversation_id)) {\n        const newConversation = {\n            id: message.conversation_id,\n            title: 'New Conversation',\n            last_message_preview: null,\n            created_at: Date.now(),\n            updated_at: Date.now(),\n            message_count: 0\n        };\n        \n        conversations.push(newConversation);\n        updateConversationList();\n    }\n    \n    // Clear the welcome message\n    clearMessages();\n}\n\n// Handle conversation list\nfunction handleConversationList(conversationsList) {\n    // Convert the object to an array\n    conversations = Object.values(conversationsList);\n    updateConversationList();\n}\n\n// Extract text content from a Message object\nfunction extractTextFromMessage(message) {\n    if (!message || !message.content || !Array.isArray(message.content)) {\n        return '';\n    }\n    \n    // Concatenate all text content parts\n    return message.content\n        .filter(content => content.type === 'text')\n        .map(content => content.text)\n        .join('\\n');\n}\n\n// Handle an incoming message from the assistant\nfunction handleIncomingMessage(message) {\n    if (message.conversation_id === activeConversationId) {\n        // Add the message to the UI\n        addAssistantMessage(message.message);\n    }\n    \n    // Update the conversation preview\n    const conversation = conversations.find(conv => conv.id === message.conversation_id);\n    if (conversation) {\n        const messageText = extractTextFromMessage(message.message);\n        conversation.last_message_preview = messageText.substring(0, 50) + (messageText.length > 50 ? '...' : '');\n        conversation.updated_at = Date.now();\n        conversation.message_count = (conversation.message_count || 0) + 1;\n        updateConversationList();\n    }\n}\n\n// Handle multiple incoming messages from the assistant\nfunction handleIncomingMessages(message) {\n    if (message.conversation_id === activeConversationId) {\n        // Add all messages to the UI\n        message.messages.forEach((msg, index) => {\n            // Only display the assistant messages\n            if (msg.role === 'assistant') {\n                addAssistantMessage(msg);\n            }\n        });\n    }\n    \n    // Update the conversation preview with the last message\n    const conversation = conversations.find(conv => conv.id === message.conversation_id);\n    if (conversation && message.messages.length > 0) {\n        // Find the last assistant message for preview\n        const assistantMessages = message.messages.filter(msg => msg.role === 'assistant');\n        if (assistantMessages.length > 0) {\n            const lastMessage = assistantMessages[assistantMessages.length - 1];\n            const messageText = extractTextFromMessage(lastMessage);\n            conversation.last_message_preview = messageText.substring(0, 50) + (messageText.length > 50 ? '...' : '');\n            conversation.updated_at = Date.now();\n            conversation.message_count = (conversation.message_count || 0) + assistantMessages.length;\n            updateConversationList();\n        }\n    }\n}\n\n// Handle conversation history\nfunction handleConversationHistory(message) {\n    if (message.conversation_id === activeConversationId) {\n        clearMessages();\n        \n        // Add each message to the UI\n        message.messages.forEach(msg => {\n            if (msg.role === 'user') {\n                addUserMessage(extractTextFromMessage(msg));\n            } else if (msg.role === 'assistant') {\n                addAssistantMessage(msg);\n            }\n            // We don't display system messages for now\n        });\n    }\n}\n\n// Add a user message to the UI\nfunction addUserMessage(text) {\n    // Create a simple text message for the UI\n    addMessageToUI('user', text);\n}\n\n// Create a copy button for messages\nfunction createCopyButton() {\n    const button = document.createElement('button');\n    button.className = 'copy-button';\n    button.innerHTML = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect><path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path></svg>';\n    button.title = 'Copy to clipboard';\n    \n    button.addEventListener('click', function(e) {\n        e.stopPropagation();\n        const messageElement = this.parentElement;\n        const textToCopy = messageElement.innerText.replace('Copy to clipboard', '').trim();\n        \n        // Copy to clipboard\n        navigator.clipboard.writeText(textToCopy).then(() => {\n            // Show success feedback\n            const originalHTML = this.innerHTML;\n            this.innerHTML = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polyline points=\"20 6 9 17 4 12\"></polyline></svg>';\n            \n            setTimeout(() => {\n                this.innerHTML = originalHTML;\n            }, 2000);\n            \n            showMessage('Copied to clipboard');\n        }).catch(err => {\n            console.error('Could not copy text: ', err);\n            showError('Failed to copy text');\n        });\n    });\n    \n    return button;\n}\n\n// Add an assistant message to the UI\nfunction addAssistantMessage(message) {\n    // Create a message element\n    const messageElement = document.createElement('div');\n    messageElement.className = 'message assistant';\n    \n    // Create and add copy button\n    const copyButton = createCopyButton();\n    messageElement.appendChild(copyButton);\n    \n    // Handle each content block\n    if (message.content && Array.isArray(message.content)) {\n        message.content.forEach(content => {\n            switch (content.type) {\n                case 'text':\n                    const textElement = document.createElement('div');\n                    // Convert newlines to <br> tags\n                    textElement.innerHTML = content.text.replace(/\\n/g, '<br>');\n                    messageElement.appendChild(textElement);\n                    break;\n                    \n                case 'tool_use':\n                    const toolUseElement = document.createElement('div');\n                    toolUseElement.className = 'tool-use';\n                    \n                    // Tool name\n                    const nameElement = document.createElement('div');\n                    nameElement.className = 'tool-name';\n                    nameElement.textContent = `Tool: ${content.name}`;\n                    toolUseElement.appendChild(nameElement);\n                    \n                    // Tool ID\n                    const idElement = document.createElement('div');\n                    idElement.className = 'tool-id';\n                    idElement.textContent = `ID: ${content.id}`;\n                    toolUseElement.appendChild(idElement);\n                    \n                    // Tool input (pretty-printed JSON)\n                    const inputElement = document.createElement('pre');\n                    inputElement.className = 'tool-input';\n                    try {\n                        inputElement.textContent = JSON.stringify(content.input, null, 2);\n                    } catch (e) {\n                        inputElement.textContent = String(content.input);\n                    }\n                    toolUseElement.appendChild(inputElement);\n                    \n                    messageElement.appendChild(toolUseElement);\n                    break;\n                    \n                case 'tool_result':\n                    const toolResultElement = document.createElement('div');\n                    toolResultElement.className = 'tool-result';\n                    if (content.is_error) {\n                        toolResultElement.classList.add('error');\n                    }\n                    \n                    // Tool use ID\n                    const useIdElement = document.createElement('div');\n                    useIdElement.className = 'tool-id';\n                    useIdElement.textContent = `Tool ID: ${content.tool_use_id}`;\n                    toolResultElement.appendChild(useIdElement);\n                    \n                    // Result content (pretty-printed JSON)\n                    const resultElement = document.createElement('pre');\n                    resultElement.className = 'tool-content';\n                    try {\n                        resultElement.textContent = JSON.stringify(content.content, null, 2);\n                    } catch (e) {\n                        resultElement.textContent = String(content.content);\n                    }\n                    toolResultElement.appendChild(resultElement);\n                    \n                    messageElement.appendChild(toolResultElement);\n                    break;\n                \n                default:\n                    console.warn(`Unknown content type: ${content.type}`);\n            }\n        });\n    } else {\n        // Fallback for simple text (legacy format)\n        const textContent = typeof message === 'string' ? message : extractTextFromMessage(message);\n        messageElement.innerHTML = textContent.replace(/\\n/g, '<br>');\n    }\n    \n    messagesContainer.appendChild(messageElement);\n    \n    // Scroll to the bottom\n    messagesContainer.scrollTop = messagesContainer.scrollHeight;\n}\n\n// Add a message to the UI\nfunction addMessageToUI(role, content) {\n    // Remove welcome message if present\n    const welcomeMessage = messagesContainer.querySelector('.welcome-message');\n    if (welcomeMessage) {\n        welcomeMessage.remove();\n    }\n    \n    const messageElement = document.createElement('div');\n    messageElement.className = `message ${role}`;\n    \n    // Create and add copy button\n    const copyButton = createCopyButton();\n    messageElement.appendChild(copyButton);\n    \n    // Create a content wrapper\n    const contentWrapper = document.createElement('div');\n    contentWrapper.className = 'message-content';\n    \n    // Process message content with markdown support\n    // For now, just do basic handling of code blocks and newlines\n    let processedContent = content;\n    \n    // Process code blocks with ```\n    processedContent = processedContent.replace(/```([\\w]*)\\n([\\s\\S]*?)```/g, function(match, language, code) {\n        return `<pre><code class=\"language-${language || 'plaintext'}\">${code.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</code></pre>`;\n    });\n    \n    // Process inline code with `\n    processedContent = processedContent.replace(/`([^`]+)`/g, '<code>$1</code>');\n    \n    // Convert remaining newlines to <br> tags\n    processedContent = processedContent.replace(/\\n/g, '<br>');\n    \n    contentWrapper.innerHTML = processedContent;\n    messageElement.appendChild(contentWrapper);\n    \n    messagesContainer.appendChild(messageElement);\n    \n    // Scroll to the bottom\n    messagesContainer.scrollTop = messagesContainer.scrollHeight;\n}\n\n// Update the conversation list in the UI\nfunction updateConversationList() {\n    conversationList.innerHTML = '';\n    \n    // Sort conversations by updated_at (most recent first)\n    const sortedConversations = [...conversations].sort((a, b) => \n        (b.updated_at || 0) - (a.updated_at || 0)\n    );\n    \n    sortedConversations.forEach(conversation => {\n        const conversationElement = document.createElement('div');\n        conversationElement.className = 'conversation-item';\n        if (conversation.id === activeConversationId) {\n            conversationElement.classList.add('active');\n        }\n        \n        // Create title element\n        const titleElement = document.createElement('div');\n        titleElement.className = 'conversation-title';\n        titleElement.textContent = conversation.title;\n        conversationElement.appendChild(titleElement);\n        \n        // Create preview element if available\n        if (conversation.last_message_preview) {\n            const previewElement = document.createElement('div');\n            previewElement.className = 'conversation-preview';\n            previewElement.textContent = conversation.last_message_preview;\n            conversationElement.appendChild(previewElement);\n        }\n        \n        // Set data attribute for ID\n        conversationElement.dataset.id = conversation.id;\n        \n        // Add click handler\n        conversationElement.addEventListener('click', () => {\n            switchConversation(conversation.id);\n        });\n        \n        conversationList.appendChild(conversationElement);\n    });\n}\n\n// Switch to a different conversation\nfunction switchConversation(conversationId) {\n    activeConversationId = conversationId;\n    \n    // Update UI\n    updateConversationList();\n    clearMessages();\n    \n    const conversation = conversations.find(conv => conv.id === conversationId);\n    if (conversation) {\n        currentConversationTitle.textContent = conversation.title;\n    }\n    \n    // Request conversation history\n    sendAction('get_history', {\n        conversation_id: conversationId\n    });\n    \n    // Also load settings for this conversation\n    loadConversationSettings(conversationId);\n}\n\n// Clear messages container\nfunction clearMessages() {\n    messagesContainer.innerHTML = '';\n}\n\n// Show error message\nfunction showError(message) {\n    const errorElement = document.createElement('div');\n    errorElement.className = 'error-message';\n    errorElement.textContent = message;\n    \n    messagesContainer.appendChild(errorElement);\n    \n    // Remove after 5 seconds\n    setTimeout(() => {\n        errorElement.remove();\n    }, 5000);\n}\n\n// Initialize when the page loads\nwindow.addEventListener('DOMContentLoaded', init);\n\n\n// Set up settings button in the chat header\nfunction setupSettingsButton() {\n    const chatHeader = document.querySelector('.chat-header');\n    const settingsButton = document.createElement('button');\n    settingsButton.className = 'settings-button';\n    settingsButton.innerHTML = `\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n            <circle cx=\"12\" cy=\"12\" r=\"3\"></circle>\n            <path d=\"M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z\"></path>\n        </svg>\n    `;\n    settingsButton.addEventListener('click', toggleSettingsPanel);\n    chatHeader.appendChild(settingsButton);\n}\n\n// Toggle settings panel visibility\nfunction toggleSettingsPanel() {\n    if (settingsPanel.classList.contains('collapsed')) {\n        // Only show settings panel if there's an active conversation\n        if (activeConversationId) {\n            settingsPanel.classList.remove('collapsed');\n            loadConversationSettings(activeConversationId);\n        } else {\n            showError('Please select or create a conversation first');\n            return;\n        }\n    } else {\n        settingsPanel.classList.add('collapsed');\n    }\n}\n\n// Load conversation settings\nfunction loadConversationSettings(conversationId) {\n    if (!conversationId) return;\n    \n    // Request current settings from server\n    sendAction('get_settings', {\n        conversation_id: conversationId\n    });\n}\n\n// Update settings display\nfunction updateSettingsForm(settings) {\n    if (!settings) return;\n    \n    // Update model select\n    const modelSelect = document.getElementById('model-select');\n    if (modelSelect) {\n        modelSelect.value = settings.model || 'claude-3-7-sonnet-20250219';\n    }\n    \n    // Update temperature\n    if (temperatureInput) {\n        // Use the server setting if defined, otherwise default to 0.7\n        const temp = settings.temperature !== undefined ? settings.temperature : 0.7;\n        temperatureInput.value = temp;\n        temperatureValue.textContent = temp;\n    }\n    \n    // Update max tokens\n    const maxTokensInput = document.getElementById('max-tokens-input');\n    if (maxTokensInput) {\n        maxTokensInput.value = settings.max_tokens || 4096;\n    }\n    \n    // Update system prompt\n    const systemPromptInput = document.getElementById('system-prompt-input');\n    if (systemPromptInput) {\n        systemPromptInput.value = settings.system_prompt || '';\n    }\n    \n    // Update title\n    const titleInput = document.getElementById('title-input');\n    if (titleInput) {\n        const conversation = conversations.find(conv => conv.id === activeConversationId);\n        if (conversation) {\n            titleInput.value = conversation.title || '';\n        }\n    }\n}\n\n// Save settings\nfunction saveSettings(event) {\n    event.preventDefault();\n    \n    if (!activeConversationId) {\n        showError('No active conversation');\n        return;\n    }\n    \n    const formData = new FormData(settingsForm);\n    \n    // Create a correctly formatted settings object that matches the protocol\n    const settings = {\n        model: formData.get('model'),\n        temperature: parseFloat(formData.get('temperature')),\n        max_tokens: parseInt(formData.get('max_tokens')),\n        title: formData.get('title'),\n        system_prompt: formData.get('system_prompt') || null,\n        additional_params: {} // Include empty object for additional parameters\n    };\n    \n    console.log('Saving settings:', settings);\n    \n    // Send update to server\n    sendAction('update_settings', {\n        conversation_id: activeConversationId,\n        settings: settings\n    });\n    \n    // Update local conversation title\n    const conversation = conversations.find(conv => conv.id === activeConversationId);\n    if (conversation && settings.title) {\n        conversation.title = settings.title;\n        currentConversationTitle.textContent = settings.title;\n        updateConversationList();\n    }\n    \n    showMessage('Settings updated successfully');\n}\n\n// Temperature slider update\nfunction updateTemperatureValue() {\n    temperatureValue.textContent = temperatureInput.value;\n}\n\n// Show a temporary message\nfunction showMessage(message) {\n    const messageElement = document.createElement('div');\n    messageElement.className = 'message-notification';\n    messageElement.textContent = message;\n    document.body.appendChild(messageElement);\n    \n    setTimeout(() => {\n        messageElement.remove();\n    }, 3000);\n}\n\n// Initialize the settings panel\nfunction initSettingsPanel() {\n    settingsPanel.classList.add('collapsed');\n    \n    // Reset settings form to default values\n    resetSettingsForm();\n}\n\n// Reset settings form to blank/default values\nfunction resetSettingsForm() {\n    // Clear model select (default is first option)\n    const modelSelect = document.getElementById('model-select');\n    if (modelSelect) {\n        modelSelect.selectedIndex = 0;\n    }\n    \n    // Reset temperature to default\n    if (temperatureInput) {\n        temperatureInput.value = 0.7;\n        temperatureValue.textContent = 0.7;\n    }\n    \n    // Reset max tokens\n    const maxTokensInput = document.getElementById('max-tokens-input');\n    if (maxTokensInput) {\n        maxTokensInput.value = 4096;\n    }\n    \n    // Clear system prompt\n    const systemPromptInput = document.getElementById('system-prompt-input');\n    if (systemPromptInput) {\n        systemPromptInput.value = '';\n    }\n    \n    // Clear title\n    const titleInput = document.getElementById('title-input');\n    if (titleInput) {\n        titleInput.value = '';\n    }\n}\n\n// Set up mobile responsiveness\nfunction setupMobileResponsiveness() {\n    const sidebarToggle = document.getElementById('sidebar-toggle');\n    const sidebar = document.querySelector('.sidebar');\n    \n    // Function to check screen size and apply mobile view if needed\n    function checkScreenSize() {\n        if (window.innerWidth <= 768) {\n            // Show the sidebar toggle button\n            sidebarToggle.style.display = 'flex';\n            \n            // Hide sidebar by default on mobile\n            if (!sidebar.classList.contains('mobile-shown')) {\n                sidebar.classList.add('mobile-hidden');\n            }\n        } else {\n            // Hide the toggle button and always show sidebar on desktop\n            sidebarToggle.style.display = 'none';\n            sidebar.classList.remove('mobile-hidden');\n        }\n    }\n    \n    // Toggle sidebar visibility on mobile\n    sidebarToggle.addEventListener('click', function() {\n        sidebar.classList.toggle('mobile-hidden');\n        sidebar.classList.toggle('mobile-shown');\n    });\n    \n    // Check on load and window resize\n    checkScreenSize();\n    window.addEventListener('resize', checkScreenSize);\n    \n    // When a conversation is selected on mobile, hide the sidebar automatically\n    document.addEventListener('click', function(e) {\n        if (window.innerWidth <= 768 && e.target.closest('.conversation-item')) {\n            sidebar.classList.add('mobile-hidden');\n            sidebar.classList.remove('mobile-shown');\n        }\n    });\n}\n\n// Dark mode theme toggle\nfunction initThemeToggle() {\n    const themeToggle = document.getElementById('theme-toggle');\n    if (!themeToggle) return;\n    \n    // Add event listener for the theme toggle\n    themeToggle.addEventListener('change', function() {\n        if (this.checked) {\n            document.documentElement.setAttribute('data-theme', 'dark');\n            localStorage.setItem('theme', 'dark');\n        } else {\n            document.documentElement.removeAttribute('data-theme');\n            localStorage.setItem('theme', 'light');\n        }\n    });\n}\n\n// Load the saved theme from localStorage\nfunction loadTheme() {\n    const savedTheme = localStorage.getItem('theme');\n    const themeToggle = document.getElementById('theme-toggle');\n    \n    if (savedTheme === 'dark') {\n        document.documentElement.setAttribute('data-theme', 'dark');\n        if (themeToggle) {\n            themeToggle.checked = true;\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["newChatBtn", "conversationList", "messagesContainer", "messageInput", "sendButton", "currentConversationTitle", "settingsPanel", "closeSettingsBtn", "settingsForm", "temperatureInput", "temperatureValue", "socket", "activeConversationId", "conversations", "isWaitingForResponse", "init", "connectWebSocket", "setupEventListeners", "initSettingsPanel", "initThemeToggle", "loadTheme", "setupMobileResponsiveness", "wsUrl", "sendAction", "event", "message", "handleServerMessage", "error", "createNewConversation", "sendMessage", "saveSettings", "updateTemperatureValue", "setupSettingsButton", "clearMessages", "addUserMessage", "showLoadingIndicator", "loadingElement", "dotsContainer", "i", "dot", "hideLoadingIndicator", "action", "additionalData", "showError", "data", "handleConversationCreated", "handleConversationList", "handleIncomingMessage", "handleIncomingMessages", "handleConversationHistory", "updateSettingsForm", "showMessage", "conv", "newConversation", "updateConversationList", "conversationsList", "extractTextFromMessage", "content", "addAssistantMessage", "conversation", "messageText", "msg", "index", "assistantMessages", "lastMessage", "text", "addMessageToUI", "createCopyButton", "button", "e", "textToCopy", "originalHTML", "err", "messageElement", "copyButton", "textElement", "toolUseElement", "nameElement", "idElement", "inputElement", "toolResultElement", "useIdElement", "resultElement", "textContent", "role", "welcomeMessage", "contentWrapper", "processedContent", "match", "language", "code", "a", "b", "conversationElement", "titleElement", "previewElement", "switchConversation", "conversationId", "loadConversationSettings", "errorElement", "chatHeader", "settingsButton", "toggleSettingsPanel", "settings", "modelSelect", "temp", "maxTokensInput", "systemPromptInput", "titleInput", "formData", "resetSettingsForm", "sidebarToggle", "sidebar", "checkScreenSize", "themeToggle", "savedTheme"]
}
